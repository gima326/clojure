;;===============

;;[ １５章　関数型スタイルでゲームを書こう　その３：ダイス・オブ・ドゥームを高速化する P326〜336 ]

;;===============

;; to expand game board size.（ [2*2] -> [3*3] ）

(def BOARD_SIZE 3)
(def BOARD-HEXNUM (* BOARD_SIZE BOARD_SIZE))

;; memoize

(def BOARD-IDXES (memoize (range BOARD-HEXNUM)))
(def NEIGHBORS (memoize (vec (map #(neighbors %) BOARD-IDXES))))
(def rate-position (memoize rate-position))

;;==============================================

;; touch of lexical closure.

(def foo (let [x 5] (fn [] x)))

;; user=> (foo)
;; 5

(let [line-number (atom 0)]
　(defn my-print [x]
　　(do
　　　(println @line-number)
　　　(println x)
　　　(reset! line-number (inc @line-number))
　　　nil)))
　　
;; user=> (my-print "this")
;; 0
;; this
;; nil

;; user=> (my-print "is")
;; 1
;; is
;; nil

;; user=> (my-print "a")
;; 2
;; a
;; nil

;; user=> (my-print "test.")
;; 3
;; test.
;; nil

;;==============================================

;; how to resolve symbol and use linked function.

;; user=> (defn squared [x] (* x x))
;; #'user/squared

;; user=> (squared 2)
;; 4

;; user=> ((resolve (symbol "squared")) 2)
;; 4

;; user=> ((resolve (symbol 'squared)) 2)
;; 4

;; user=> ((symbol 'squared) 2)
;; nil

;; user=> ((symbol "squared") 2)
;; nil

;; user=> ((resolve 'squared) 3)
;; 9

;; user=> ((resolve "squared") 3)
;; Execution error (ClassCastException) at user/eval3910 (REPL:1).
;; java.lang.String cannot be cast to clojure.lang.Symbol

user=> (let [ old-squared (resolve 'squared) ]
　(old-squared 3))
  #_=> 9

;;==============================================

;; comparison of simple recursion types. [ fastest type was ver4 ]

(defn my-length [lst]
　(if (empty? lst)
　　0
　　(inc (my-length (rest lst)))))

;; user=> (my-length (range 5950))
;; Execution error (StackOverflowError) at user/my-length (REPL:4).
;; null

(defn my-length2 [lst]
　(letfn [ (fnc [lst acc]
　　(if (empty? lst)
　　　acc
　　　(fnc (rest lst) (inc acc)))) ]
　　(fnc lst 0)))

;; user=> (my-length2 (range 7450))
;; Execution error (StackOverflowError) at user/my-length2$fnc (REPL:5).
;; null

(defn my-length2-2 [lst]
　(letfn [ (fnc [l acc]
　　(if (empty? l)
　　　acc
　　　(recur (rest l) (inc acc)))) ]
　　(fnc lst 0)))

(defn my-length3 [lst]
　(loop [[car & cdr] lst acc 0]
　　(if (nil? car)
　　　acc
　　　(recur cdr (inc acc)))))

(defn my-length4 [lst]
　(loop [l lst acc 0]
　　(if (empty? l)
　　　acc
　　　(recur (rest l) (inc acc)))))

;; user=> (time (my-length2-2 (range 100000000)))
;; "Elapsed time: 5688.292553 msecs"
;; 100000000

;; user=> (time (my-length3 (range 100000000)))
;; "Elapsed time: 5997.472004 msecs"
;; 100000000

;; user=> (time (my-length4 (range 100000000)))
;; "Elapsed time: 4864.939613 msecs"
;; 100000000

;;==============================================
