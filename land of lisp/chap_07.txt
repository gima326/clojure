;;===============

;;[ ７章　単純なリストの先へ：P99〜119 ]

;;===============

(defn substitute-if [alt-val pred coll]
　(map #(if (pred %) alt-val %) coll))

;;===============

(def MAX-LABEL-LENGTH 30)

(defn dot-label [exp]
　(if exp
　　(let [sexp (str exp)]
　　　(if (> (count sexp) MAX-LABEL-LENGTH)
　　　　(str (subs sexp 0 (- MAX-LABEL-LENGTH (.length "..."))) "...")
　　　　sexp))
　　""))

(defn dot-name [exp]
　(clojure.string/upper-case
　　(clojure.string/replace exp #"[^A-Za-z0-9_]" "_")))

;;===============

;; 補助関数

(defn create-node-line [node info]
　(str (dot-name node) "[label=\"" (dot-label info) "\"];\n"))

(defn edge->dot [edge flg]
　(create-node-line (first edge) ((if flg rest (comp list last)) edge)))

(defn create-edge-line [from to dig_flg]
　(str (dot-name from) (if dig_flg "->" "--") (edge->dot to dig_flg)))

;;===============

(defn nodes->dot_ [nodes]
　(apply str
　　(map
　　　(fn [[n n_info]] (create-node-line n (str (dot-name n) " " n_info)))
　　　nodes)))

;; [ ↓↓↓↓↓ for の方がキレイに書けるんだな、と。  ↓↓↓↓↓ ]

(defn nodes->dot [nodes]
　(apply str
　　(for [[n n_info] nodes]
　　　(create-node-line n (str (dot-name n) " " n_info)))))

;;===============

(defn edges->dot_ [edges]
　(apply str
　　(map
　　　(fn [[node_f nodes_t]]
　　　　(if (seq? (first nodes_t))
　　　　　(apply str (map (fn [node_t] (create-edge-line node_f node_t true)) nodes_t))
　　　　　(create-edge-line node_f nodes_t true)))
　　　edges)))

;; [ ↓↓↓↓↓ for の方がキレイに書けるんだな、と。  ↓↓↓↓↓ ]

(defn edges->dot [edges]
　(apply str
　　(for [[node_f nodes_t] edges]
　　　(if (seq? (first nodes_t))
　　　　(apply str (for [node_t nodes_t] (create-edge-line node_f node_t true)))
　　　　(create-edge-line node_f nodes_t true)))))

;; [ ↓↓↓↓↓ 関数「create-edge-line」呼び出し箇所を一本化すると、こうなるけど、どっちがいいんだろう？…うーん。  ↓↓↓↓↓ ]

(defn edges->dot [edges]
　(apply str
　　(for [[node_f nodes_t] edges]
　　　(apply str
　　　　(for [node_t (if (seq? (first nodes_t)) nodes_t (list nodes_t))]
　　　　　(create-edge-line node_f node_t true))))))

;;===============

(defn uedges->dot_ [edges]
　(loop [current edges rslt ()]
　　(if (empty? current)
　　　(apply str rslt)
　　　(recur
　　　　(rest current)
　　　　(cons
　　　　　((fn [edge]
　　　　　　(let [ [node_f nodes_t] (first edge)
　　　　　　　　　　others (keys (rest edge)) ]
　　　　　　　(if (seq? (first nodes_t))
　　　　　　　　(apply str
　　　　　　　　　(for [node_t nodes_t :when (or (nil? others) (not (.contains others (first node_t))))]
　　　　　　　　　　(create-edge-line node_f node_t false)))

　　　　　　　　(if (or (nil? others) (not (.contains others (first nodes_t))))
　　　　　　　　　(create-edge-line node_f nodes_t false))))) current)
　　　　　rslt)))))
     
;; [ ↓↓↓↓↓ recur 部分をスッキリさせてみた。行数も減らせた（18 -> 14行）。  ↓↓↓↓↓ ]

(defn uedges->dot [edges]
　(loop [current edges rslt ()]
　　(if (empty? current)
　　　(apply str rslt)
　　　(recur
　　　　(rest current)
　　　　(let [ [node_f nodes_t] (first current)
　　　　　　　　others (keys (rest current)) ]
　　　　　(cons
　　　　　　(apply str
　　　　　　　(for [node_t (if (seq? (first nodes_t)) nodes_t (list nodes_t))
　　　　　　　　:when (or (nil? others) (not (.contains others (first node_t))))]
　　　　　　　　　(create-edge-line node_f node_t false)))
　　　　　　rslt))))))

;;===============

(defn graph->dot [nodes edges flg]
　(str
　　(if flg "digraph {\n" "graph {\n")
　　(nodes->dot nodes)
　　((if flg edges->dot uedges->dot) edges)
　　"}\n"))

;;===============

(defn dot->png [fname thunk]
　(with-open [fout (clojure.java.io/writer fname)]
　　(.write fout (thunk)))
　(clojure.java.shell/sh "bash" "-c" (str "neato -Tpng " fname " -o '" fname ".wizard.png'")))

(defn graph->png [fname nodes edges dig_flg]
　(dot->png fname (fn [] (graph->dot nodes edges dig_flg))))

;;===============
