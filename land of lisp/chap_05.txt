;;===============

;;[ ５章　テキストゲームのエンジンを作る：P57〜75 ]

;;===============

(def LOCATION (atom 'living-room))

(def NODES
　'{living-room (you are in the living-room of a wizard's house. there is a wizard snoring loudly on the couch.)
   garden (you are in a beautiful garden. there is a well in front of you.)
   attic (you are in the attic. there is a giant welding torch in the corner.)})

(def EDGES
　'{living-room ((garden west door) (attic upstairs ladder))
   garden (living-room east door)
   attic (living-room downstairs ladder)})

(def OBJ '(whiskey bucket chain frogling))

;;===============

(def OBJ-LOCATION
　(atom '({whiskey living-room}
　　{bucket living-room}
　　{chain garden}
　　{frog garden})))

;;===============

(defn describe-path [edge]
　`(~'there ~'is ~'a ~(last edge) ~'going ~(first (rest edge)) ~'from ~'here.))

(defn describe-paths [loc edge]
　(if (seq? (first (loc edge)))
　　(apply concat (map describe-path (loc edge)))
　　(loc edge)))

(defn objects-at [loc objs obj-locs]
　(apply concat
　　(for [obj objs]
　　　(for [obj-loc obj-locs :when (= (obj obj-loc) loc)] obj))))

(defn describe-objects [loc objs obj-locs]
　(apply concat
　　(map (fn [obj] `(~'you ~'see ~'a ~obj ~'on ~'the ~'floor.)) (objects-at loc objs obj-locs))))

(defn look []
　(concat (@LOCATION NODES) ;; describe-location
　　　　　　(describe-paths @LOCATION EDGES)
　　　　　　(describe-objects @LOCATION OBJ @OBJ-LOCATION)))

(defn walk [direction]
　(let [locs (@LOCATION EDGES)]
　　(let [next_loc
　　　(if (seq? (first locs))
　　　　;; list
　　　　(first (for [loc locs :when (= direction (first (rest loc)))] loc))
　　　　;; atom
　　　　(if (= direction (first (rest locs))) locs))]

　　　(if (not next_loc)
　　　　;; nil
　　　　'(you cannot go that way.)
　　　　;; location correct
　　　　(do
　　　　　(reset! LOCATION (first next_loc))
　　　　　(look))))))

(defn pickup [obj]
　;; method java.util.Collection#contains()
　(if (.contains (objects-at @LOCATION OBJ @OBJ-LOCATION) obj)
　　(do
　　　(reset! OBJ-LOCATION (conj @OBJ-LOCATION {obj 'body}))
　　　`(~'you ~'are ~'now ~'carrying ~'the ~obj))
　　'(you cannnot get that.)))

(defn inventory []
　;; ignore the same items duplicated
　(cons 'items- (set (objects-at 'body OBJ @OBJ-LOCATION))))

;;===============
