;;==============================================
;; Dice of doom ver.3
;;==============================================

(def BOARD_WIDTH 900)
(def BOARD_HEIGHT 500)
(def BOARD_SCALE 64)

(def TOP_OFFSET 3)
(def DICE_SCALE 40)
(def DOT-SIZE 0.05)

(def UPPER_SIDE [[0 -1] [-0.6 -0.75] [0 -0.5] [0.6 -0.75]])
(def LEFT_SIDE [[0 -0.5] [-0.6 -0.75] [-0.6 0] [0 0.25]])
(def RIGHT_SIDE [[0 -0.5] [0.6 -0.75] [0.6 0] [0 0.25]])

(def DIE_COLORS [[255 63 63] [50 100 50] [100 0 100] [63 63 255]])

(def STARS [
　　;; player_0
　　[ [ 0.0 -0.75 ] ]
　　;; player_1
　　[ [ -0.25 -0.75 0.25 -0.75 ] ]
　　;; player_2
　　[ [ -0.25 -0.75  0.0 -0.75 0.25 -0.75 ] ]
　　;; player_3
　　[ [ -0.25 -0.75 0.0 -0.675 0.025 -0.85 0.25 -0.75 ] ] ])

(defn create-stars [pos]
　(mapcat #(partition 2 %) (STARS pos)))

(defn calc-pt [x y [pt_x pt_y]]
　[(+ x (* DICE_SCALE pt_x)) (+ y (* DICE_SCALE pt_y))])

(defn fill-stars [x y pairs]
　(letfn [(fnc [x1 y1 [x2 y2]] (calc-pt x y [(+ x1 (* x2 DOT-SIZE)) (+ y1 (* y2 DOT-SIZE))]))]
　　(apply str
　　　(map
　　　　(fn [[x3 y3]]
　　　　　(polygon-fn
　　　　　　(mapcat #(fnc x3 y3 %) [[-1 -1] [-1 1] [1 1] [1 -1]])
　　　　　　'(255 255 255)
　　　　　　-100))
　　　　pairs))))

(defn draw-die-svg [x y col pairs]
　(apply str
　　(concat
　　　;; faces
　　　(for [[p c] [ [UPPER_SIDE (brightness col 40)]
　　　　　　　　　　　[LEFT_SIDE col]
　　　　　　　　　　　[RIGHT_SIDE (brightness col -40)] ] ]
　　　　(polygon-fn (mapcat #(calc-pt x y %) p) c -100))

　　　;; stars
　　　(fill-stars x y pairs))))

;;----------------------------------------------

(defn draw-tile-svg [x y p_type p_dice x2 y2 col]
　(str
　　;; board
　　(apply str
　　　(for [z (range 2)]
　　　　(polygon-fn
　　　　　(mapcat
　　　　　　(fn [[pt_x pt_y]]
　　　　　　　[ (+ x2 (* BOARD_SCALE pt_x))
　　　　　　　　(+ y2 (* BOARD_SCALE (+ pt_y (* (- 1 z) 0.1)))) ])
　　　　　　[ [-1 -0.2] [0 -0.5] [1 -0.2] [1 0.2] [0 0.5] [-1 0.2] ])
　　　　　col
　　　　　-100)))

　　　;; dice
　　　(apply str
　　　　(for [z (range p_dice)]
　　　　　(draw-die-svg (+ x2 (* DICE_SCALE 0.3 (if (odd? (+ x y z)) -0.3 0.3)))
　　　　　　　　　　　　　 (- y2 (* DICE_SCALE z 0.8))
　　　　　　　　　　　　　　col
　　　　　　　　　　　　　　(create-stars p_type))))))

;;----------------------------------------------

(defn make-game-link [pos]
　(format "/game?chosen=%s" pos))

(defn draw-board-svg [board chosen-tile leagal-tiles]
　(for [x (range BOARD_SIZE) y (range BOARD_SIZE)
　　:let [ pos (+ x (* BOARD_SIZE y))
　　　　　　[p_type p_dice] (board pos)
　　　　　　x2 (* BOARD_SCALE (+ (* 2 x) (- BOARD_SIZE y)))
　　　　　　y2 (* BOARD_SCALE (+ (* y 0.7) TOP_OFFSET))
　　　　　　col (brightness (DIE_COLORS p_type) (* -15 (- BOARD_SIZE y)))
　　　　　　selected (= (str pos) chosen-tile) ] ]

　　(if (or (some #{pos} leagal-tiles) selected)
　　　(tag g ()
　　　　(tag a ("xlink:href" (make-game-link pos))
　　　　　(draw-tile-svg x y p_type p_dice x2 y2
　　　　　　(if selected (brightness col 100) col))))
　　　(draw-tile-svg x y p_type p_dice x2 y2 col))))

;;==============================================

(defn web-announce-winner [board]
　(let [players (winners board)]
　　(str
　　　(if (= 1 (count players))
　　　　(str "<br>" "[ The winner is " (player-letter (first players)) " ]")
　　　　(str "<br>" "[ The game is a tie between "
　　　　　(.trim (apply str (map #(str (player-letter %) " ") players))) " ]"))
　　　(tag a (href "/game") "[ play again ]"))))

(defn web-hndl-computer [tree]
　(do
　　(reset! tree (hdle-computer @tree))
　　(str
　　　"The computer has moved."
　　　(tag script ()
　　　　"window.setTimeout('window.location=\"game?chosen=nil\"', 2500)"))))

(defn web-hndl-human [pos tree from-tile]
　(cond
　　(or (nil? pos) (= pos "nil"))
　　　"Please choose a hex to move from:"
　　(= pos "pass")
　　　(do
　　　　(reset! tree (first (rest (lazy-car (last @tree)))))
　　　　(str
　　　　　"Your reinforcements have been placed. "
　　　　　(tag a (href (make-game-link nil)) "[continue]")))
　　(not @from-tile)
　　　(do
　　　　(reset! from-tile pos)
　　　　"Now choose a destination:")
　　(= pos @from-tile)
　　　(do
　　　　(reset! from-tile nil)
　　　　"Move cancelled.")
　　:else
　　　(do
　　　　(reset! tree
　　　　　(first (rest
　　　　　　(lazy-find-if
　　　　　　　#(let [[from to] (first %)]
　　　　　　　　(and (= @from-tile (str from)) (= pos (str to))))
　　　　　　　(last @tree)))))

　　　　(reset! from-tile nil)

　　　　(str
　　　　　"You may now "
　　　　　(tag a (href (make-game-link 'pass)) "pass")
　　　　　" or make another move:"))))

;;==============================================

(defn draw-dod-page [tree selected-tile]
　(svg
　　BOARD_WIDTH
　　BOARD_HEIGHT

　　(draw-board-svg
　　　(first (rest tree))
　　　selected-tile

　　　(remove nil?
　　　　(set
　　　　　(take-all
　　　　　　(if selected-tile
　　　　　　　(lazy-mapcar
　　　　　　　　#(if (= (str (first (first %))) (str selected-tile))
　　　　　　　　　(first (rest (first %))))
　　　　　　　　(last tree))
　　　　　　　(lazy-mapcar #(first (first %)) (last tree)))))))))

(let [ CUR_GAME_TREE (atom nil)
　　　　FROM_TILE (atom nil)
　　　　CHOSEN (atom nil) ]

　(defn dod-request-handler [line encode]
　　(letfn [(web-initialize []
　　　(do
　　　　(reset! FROM_TILE nil)
　　　　(reset! CUR_GAME_TREE (gen-game-tree 0 false))
　　　　(reset! CHOSEN nil))) ]

　　　(let [ url (parse-request-line encode (first line))
　　　　　　　path (first url)
　　　　　　　params (first (rest url)) ]

　　　　(if (= path "/quit")
　　　　　(do
　　　　　　(web-initialize)
　　　　　　"bye!")

　　　　　(if (not-any? #{path} ["/game" "/favicon.ico"])
　　　　　　"Sorry... I don't know that page."

　　　　　　(if (= path "/game")
　　　　　　　(do
　　　　　　　　(if (or (nil? @CUR_GAME_TREE) (nil? params)) (web-initialize))
　　　　　　　　(if params (reset! CHOSEN (params 'CHOSEN)))

　　　　　　　　(let [content
　　　　　　　　　(str
　　　　　　　　　　(tag center ()
　　　　　　　　　　　"Welcome to DICE OF DOOM! " (tag a (href "/quit") "[ quit ]")
　　　　　　　　　　　(tag br ())

　　　　　　　　　　　(cond
　　　　　　　　　　　　(lazy-nil? (last @CUR_GAME_TREE))
　　　　　　　　　　　　　(web-announce-winner (first (rest @CUR_GAME_TREE)))
　　　　　　　　　　　　(zero? (first @CUR_GAME_TREE))
　　　　　　　　　　　　　(web-hndl-human @CHOSEN CUR_GAME_TREE FROM_TILE)
　　　　　　　　　　　　:else
　　　　　　　　　　　　　(web-hndl-computer CUR_GAME_TREE))

　　　　　　　　　　　(tag br ())
　　　　　　　　　　　(draw-dod-page @CUR_GAME_TREE @FROM_TILE))) ]

　　　　　　　　　(clojure.pprint/cl-format false
　　　　　　　　　　"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nContent-Length:~a\r\n\r\n~a"
　　　　　　　　　　(count content) content))))))
))))

;;==============================================

;; 実行時
;; (serve dod-request-handler "UTF8")

;; 接続が切れるのか、以下のようにエラーが出ることがある。
;; その原因を究明中。[201221]

;; user=> (serve dod-request-handler "UTF8")
;; Execution error (NullPointerException) at java.util.regex.Matcher/getTextLength (Matcher.java:1283).
;; null

;;==============================================
