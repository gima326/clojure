;;==============================================
;; lazy
;;==============================================

(defmacro my-lazy [& body]
　`(fn [] (do ~@body)))

(defn my-force [lazy-value] (lazy-value))

(defmacro lazy-cons [a d]
　`(my-lazy (cons ~a (cons ~d ()))))

(defn lazy-car [x] (first (my-force x)))
(defn lazy-cadr [x] (first (rest (my-force x))))
(defn lazy-cdr [x] (rest (my-force x)))

(defn lazy-nil [] (my-lazy nil))
(defn lazy-nil? [x] (not (my-force x)))

(defn lazy-empty [] (my-lazy ()))
(defn lazy-empty? [x] (empty? (my-force x)))

(defn make-lazy [[car & cdr]]
　(my-lazy
　　(if (not (nil? car))
　　　(cons car (cons (make-lazy cdr) ())))))

(defn my-take [n lazy_lst]
　(loop [l lazy_lst cnt n rslt ()]
　　(if (or (zero? cnt) (lazy-nil? l))
　　　(reverse rslt)
　　　(recur
　　　　(lazy-cadr l)
　　　　(dec cnt)
　　　　(cons (lazy-car l) rslt)))))

(defn take-all [lazy_lst]
　(loop [l lazy_lst rslt ()]
　　(if (lazy-nil? l)
　　　(reverse rslt)
　　　(recur
　　　　(lazy-cadr l)
　　　　(cons (lazy-car l) rslt)))))

(defn lazy-mapcar [fnc lazy_lst]
　(my-lazy
　　(if (not (lazy-nil? lazy_lst))
　　　(cons
　　　　(fnc (lazy-car lazy_lst))
　　　　(cons
　　　　　(lazy-mapcar fnc (lazy-cadr lazy_lst))
　　　　　())))))

(defn lazy-mapcan [fnc lazy_lst]
　(letfn [ (f [lst-cur]
　　(if (lazy-nil? lst-cur)
　　　(my-force (lazy-mapcan fnc (lazy-cadr lazy_lst)))
　　　(cons
　　　　(lazy-car lst-cur)
　　　　(cons
　　　　　(my-lazy (f (lazy-cadr lst-cur)))
　　　　　())))) ]

　　(my-lazy
　　　(if (not (lazy-nil? lazy_lst))
　　　　(f (fnc (lazy-car lazy_lst)))))))

(defn lazy-find-if [fnc lazy_lst]
　(if (not (lazy-nil? lazy_lst))
　　(let [x (lazy-car lazy_lst)]
　　　(if (fnc x)
　　　　x
　　　　(recur fnc (lazy-cadr lazy_lst))))))

(defn lazy-nth [n lazy_lst]
　(if (zero? n)
　　(lazy-car lazy_lst)
　　(recur (dec n) (lazy-cadr lazy_lst))))

;;==============================================
