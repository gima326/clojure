;; 『JavaScript を使って学ぶ関数型プログラミングの基礎』（長瀬嘉秀 監修／立川察理 著）
;;  コード例のなかから、興味深いものをピックアップして、
;; 「Clojure で実現するとこんな感じかな？」というコードを書いてみました。


========================================
;; 非同期処理にコールバック関数を渡す（P244 - 251）
========================================

;; たらいまわし関数

(def tarai
　(fn [x y z]
　　(if (<= x y)
　　　y
　　　(tarai
　　　　(tarai (- x 1) y z)
　　　　(tarai (- y 1) z x)
　　　　(tarai (- z 1) x y)))))


----------------------------------------

;; ベンチマーク用補助マクロ

(defmacro bench [expr & flg]
　`(let [start# (System/nanoTime) result# ~expr]
　　(if ~@flg
　　　{:result result# :elapsed (- (System/nanoTime) start#)}
　　　{:result ~''---- :elapsed (- (System/nanoTime) start#)})))


user=> (bench (tarai (* 1 2) 1 0))
{:result ----, :elapsed 165179}

user=> (bench (tarai (* 1 2) 1 0) true)
{:result 2, :elapsed 102813}

user=> (bench (tarai (* 5 2) 5 0) true)
{:result 10, :elapsed 23635824}

user=> (bench (tarai (* 7 2) 7 0) true)
{:result 14, :elapsed 41541753669}

----------------------------------------

[ client ]

python -m telnetlib localhost 8888

----------------------------------------

[ server ]

(import '(java.io InputStreamReader OutputStreamWriter)
　　　　'(clojure.lang LineNumberingPushbackReader)
　　　　'(java.net ServerSocket))

(defn serve
　([] (serve 8888))
　([port] 
　　(with-open [ socket (ServerSocket. port)
　　　　　　　　 stream (. socket accept)
　　　　　　　　　r (LineNumberingPushbackReader. (InputStreamReader. (.getInputStream stream)))
    　  　　      w (OutputStreamWriter. (.getOutputStream stream)) ]

　　　(let [eof (new Object)]
　　　　(loop [chunk (read r false eof)]
　　　　　(when-not (= chunk eof)
　　　　　　(let [ rslt
　　　　　　　(if (number? chunk)
　　　　　　　　(str "taraied: " (bench (tarai (* 2 chunk) chunk 0) true))
　　　　　　　　(str "non-number: " (clojure.string/upper-case chunk))) ]

　　　　　　　;; ログ
　　　　　　　(println "\nclient: " chunk)
　　　　　　　(println rslt)

　　　　　　　;; クライアント向け
　　　　　　　(binding [*out* w]

　　　　　　　　;; 以下、どれも同じように動く。
　　　　　　　　(println rslt))

　　　　　　　　;; (. w write rslt)
　　　　　　　　;; (. w write "\n")
　　　　　　　　;; (.flush w))

　　　　　　　　;; (prn rslt)
　　　　　　　　;; (flush)))

　　　　　　(recur (read r false eof)))))))))


;; on-thread はなくても問題ないけれど。

(defn on-thread [fnc]
  (doto (new Thread fnc) (.start)))


==============================================

[ 実行時：server ]

user=> (on-thread serve)
#object[java.lang.Thread 0x73450654 "Thread[Thread-10,5,main]"]

user=> 
client:  1
taraied: {:result 2, :elapsed 209628}

----------------------------------------------

[ 実行時：client ]

$ python -m telnetlib localhost 8888
1
taraied: {:result 2, :elapsed 209628}
2
taraied: {:result 4, :elapsed 52568}
3
taraied: {:result 6, :elapsed 503205}
7
5　　　　　　　　　　　　　　　　　　　　　　<- tarai サーバーからのレスポンスが来る前に表示された①
4　　　　　　　　　　　　　　　　　　　　　　<- tarai サーバーからのレスポンスが来る前に表示された②
taraied: {:result 14, :elapsed 42691210626}
taraied: {:result 10, :elapsed 24662567}
taraied: {:result 8, :elapsed 910653}

==============================================
