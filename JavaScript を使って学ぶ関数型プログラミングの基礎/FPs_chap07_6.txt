;; 『JavaScript を使って学ぶ関数型プログラミングの基礎』（長瀬嘉秀 監修／立川察理 著）
;;  コード例のなかから、興味深いものをピックアップして、
;; 「Clojure で実現するとこんな感じかな？」というコードを書いてみました。

========================================
;; モナドを作る（P268 - 275）
========================================

;; 恒等モナド

(def ID
　{ 'unit (fn [val] val)
　　'flatMap (fn [instanceM]
　　　　　　　　　(fn [transform]
　　　　　　　　　　(transform instanceM))) })

(def succ
　(fn [n] (+ n 1)))

(def my-compose
　(fn [f g]
　　(fn [arg]
　　　(f (g arg)))))

(def my-opposite
　(fn [x] (- x)))

----------------------------------------

user=> ((ID 'unit) 1)
1

user=> (((ID 'flatMap)
　((ID 'unit) 1))
　　(fn [num] ((ID 'unit) (succ num))))
  #_=>   #_=> 2

user=> ((my-compose my-opposite succ) 1)
-2

user=> (((ID 'flatMap)
　((ID 'unit) 1))
　　(fn [num]
　　　(((ID 'flatMap)
　　　　((ID 'unit) (succ num)))
　　　　(fn [num2] ((ID 'unit) (my-opposite num2))))))
  #_=>   #_=>   #_=>   #_=>   #_=> -2

----------------------------------------

;; 右「単位元」則

(def instanceM ((ID 'unit) 1))

user=> (= instanceM
　(((ID 'flatMap) instanceM) (ID 'unit)))
  #_=> true


;; 左「単位元」則

(def f (fn [n] ((ID 'unit) (+ n 1))))
(def g (fn [n] ((ID 'unit) (- n))))

user=> (f 1)
2

user=> (= (f 1)
　(((ID 'flatMap) ((ID 'unit) 1)) f))
  #_=> true


;; 結合法則

user=> (= (((ID 'flatMap)
　　　(((ID 'flatMap) instanceM) f)) g)

　　(((ID 'flatMap) instanceM)
　　　(fn [x] (((ID 'flatMap) (f x)) g))))
  #_=>   #_=>   #_=>   #_=> true


========================================
;; Maybe モナド（P275 - 280）
========================================

(def maybe
　{ 'just (fn [val]
　　　　　　　(fn [pattern]
　　　　　　　　((pattern 'just) val)))

　　'nothing (fn [& args]
　　　　　　　　(fn [pattern]
　　　　　　　　　(pattern 'nothing))) })

(def MAYBE
　{ 'unit (fn [val] ((maybe 'just) val))
　　'flatMap (fn [instanceM]
　　　　　　　　　(fn [transform]
　　　　　　　　　　(instanceM
　　　　　　　　　　　{ 'just (fn [val] (transform val))
　　　　　　　　　　　　'nothing (maybe 'nothing) })))
　　'getOrElse (fn [instanceM]
　　　　　　　　　(fn [alt]
　　　　　　　　　　(instanceM
　　　　　　　　　　　{ 'just (fn [val] val)
　　　　　　　　　　　　'nothing alt }))) })

(def add
　(fn [mayBeA mayBeB]
　　(((MAYBE 'flatMap) mayBeA)
　　　(fn [a]
　　　　(((MAYBE 'flatMap) mayBeB)
　　　　　(fn [b]
　　　　　　((MAYBE 'unit) (+ a b))))))))

----------------------------------------

(def justOne ((maybe 'just) 1))
(def justTwo ((maybe 'just) 2))
(def nothing (maybe 'nothing))

----------------------------------------

;; Maybe モナド（その２）

;; maybe.nothing が「不正な値ですよ」と表明している感じが気にくわなくてね。
;; 計算にそぐわない数値以外の値のときに、ちゃんとエラーを出すためにはどうしたらいいのかな、と
;; 実装したのがこれ。

;; val2.sum ってとこは冗長だけど、
;; pattern、pattern2 がどこから呼び出されているのか、
;; それを可視化するために追加したものです。

(def val2
　{ 'num (fn [val]
　　　　　　(fn [pattern]
　　　　　　　((pattern 'just) val)))

　　 'sum (fn [val]
　　　　　　(fn [pattern2]
　　　　　　　((pattern2 'just2) val)))})

(def MAYBE2
　{ 'unit (fn [val] ((val2 'sum) val))
　　'flatMap (fn [instanceM]
　　　　　　　　　(fn [transform]
　　　　　　　　　　(if (nil? instanceM)
　　　　　　　　　　　(fn [pattern2] (pattern2 'else))
　　　　　　　　　　　(instanceM
　　　　　　　　　　　　;; pattern
　　　　　　　　　　　　{ 'just (fn [val]
　　　　　　　　　　　　　　　　　　(if (number? val)
　　　　　　　　　　　　　　　　　　　(transform val)
　　　　　　　　　　　　　　　　　　　(fn [pattern2] (pattern2 'else)))) }))))
　　'getOrElse (fn [instanceM]
　　　　　　　　　(fn [alt]
　　　　　　　　　　(instanceM
　　　　　　　　　　　;; pattern2
　　　　　　　　　　　{ 'just2 (fn [val] val)
　　　　　　　　　　　　'else alt }))) })

(def add2
　(fn [mayBeA mayBeB]
　　(((MAYBE2 'flatMap) mayBeA)
　　　(fn [a]
　　　　(((MAYBE2 'flatMap) mayBeB)
　　　　　(fn [b]
　　　　　　((MAYBE2 'unit) (+ a b))))))))

----------------------------------------

(def justOne ((val2 'num) 1))
(def justTwo ((val2 'num) 2))

;; 数値型（キーワード：num）として nil を設定している

(def justThree ((val2 'num) nil))

;; 「キーワード：nothing」 という該当するキーワード（型）がない指定がなされた場合

(def nothing (val2 'nothing))

----------------------------------------

user=> (((MAYBE2 'getOrElse) (add2 justOne justTwo)) "error!")
3

user=> (((MAYBE2 'getOrElse) (add2 justOne justThree)) "error!")
"error!"

user=> (((MAYBE2 'getOrElse) (add2 justOne nothing)) "error!")
"error!"


========================================
;; IO モナドで副作用を閉じ込める（P280 - 290）
========================================

(def pair
　{ 'con (fn [left right]
　　　　　　(fn [pattern] ((pattern 'con) left right)))

　　'right (fn [tuple]
　　　　　　　(tuple { 'con (fn [left right] right) }))

　　'left (fn [tuple]
　　　　　　　(tuple { 'con (fn [left right] left) })) })

;; 外界を明示する IO モナド

(def IO
　{ 'unit (fn [any]
　　　　　　　(fn [world]
　　　　　　　　((pair 'con) any world)))

　　'run (fn [instanceM]
　　　　　　(fn [world]
　　　　　　　((pair 'left) (instanceM world))))

　　'readFile (fn [path]
　　　　　　　　　(fn [world]
　　　　　　　　　　(with-open [rdr (reader path :encoding "UTF-8")]
　　　　　　　　　　　(loop [line (.readLine rdr) acc ""]
　　　　　　　　　　　　(if (nil? line)
　　　　　　　　　　　　　(((IO 'unit) acc) world)
　　　　　　　　　　　　　(recur (.readLine rdr) (str acc line "\n")))))))

　　'println (fn [msg]
　　　　　　(fn [world]
　　　　　　　(do
　　　　　　　　(println msg)
　　　　　　　　(((IO 'unit) nil) world)))) })

----------------------------------------

user=> (def initialWorld nil)
#'user/initialWorld

user=> (nil? (((IO 'run) ((IO 'println) "hello, IO monad")) initialWorld))
hello, IO monad
true

user=> (use '[clojure.java.io :only (reader)])
nil

user=> (((IO 'run) ((IO 'readFile) "./aaa.txt")) initialWorld)
"１．あいうえお\n２．かきくけこ\n"

----------------------------------------

;; 外界を明示しない IO モナド

(def IO2
　{ 'unit (fn [any]
　　　　　　　(fn [& args] any))

　　'run (fn [instance] (instance))

　　'readFile (fn [path]
　　　　　　　　　(with-open [rdr (reader path :encoding "UTF-8")]
　　　　　　　　　　(loop [line (.readLine rdr) acc ""]
　　　　　　　　　　　(if (nil? line)
　　　　　　　　　　　　((IO2 'unit) acc)
　　　　　　　　　　　　(recur (.readLine rdr) (str acc line "\n"))))))

　　'println (fn [msg]
　　　　　　　　(do
　　　　　　　　　(println msg)
　　　　　　　　　((IO2 'unit) nil))) })

----------------------------------------

user=> ((IO2 'run) ((IO2 'println) "hello, IO monad"))
hello, IO monad
nil

user=> ((IO2 'run) ((IO2 'readFile) "./aaa.txt"))
"１．あいうえお\n２．かきくけこ\n"


========================================
;; IO アクションを合成する
========================================

(def lst
　{ 'emp (fn [& args]
　　　　　　(fn [pattern] ((pattern 'emp))))
　　'con (fn [alist]
　　　　　　(fn [pattern] ((pattern 'con) alist))) })

(def my-str
　{ 'car (fn [str] (if (not ((my-str 'isEmp) str)) (subs str 0 1)))
　　'cdr (fn [str] (if (<= 1 (count str)) (subs str 1) ""))
　　'isEmp (fn [str] (= 0 (count str)))
　　'toList (fn [s]
　　　　　　　　(if ((my-str 'isEmp) s)
　　　　　　　　　'(emp)
　　　　　　　　　(list 'con
　　　　　　　　　　((my-str 'car) s)
　　　　　　　　　　((my-str 'toList) ((my-str 'cdr) s))))) })

;; アクション合成用

(def IO2-2
　{ 'unit (fn [any]
　　　　　　　(fn [& args] any))

　　'run (fn [instance] (instance))

　　'readFile (fn [path]
　　　　　　　　　(with-open [rdr (reader path :encoding "UTF-8")]
　　　　　　　　　　(loop [line (.readLine rdr) acc ""]
　　　　　　　　　　　(if (nil? line)
　　　　　　　　　　　　((IO2-2 'unit) acc)
　　　　　　　　　　　　(recur (.readLine rdr) (str acc line "\n"))))))

　　'println (fn [msg]
　　　　　　　　(do
　　　　　　　　　(println msg)
　　　　　　　　　((IO2-2 'unit) nil)))

　　'flatMap (fn [instanceA]
　　　　　　　　　(fn [actionAB]
　　　　　　　　　　(actionAB ((IO2-2 'run) instanceA))))

　　'done (fn [any] ((IO2-2 'unit) nil))

　　'putChar (fn [c]
　　　　　　　　(print c)
　　　　　　　　((IO2-2 'unit) nil))

　　'putStr (fn [matcher alist]

　　　　　　　　;; クラス「lst」を呼び出している。関数型プログラミングのスタイルに反するなぁ…。

　　　　　　　　((matcher lst)
　　　　　　　　　alist
　　　　　　　　　{ 'emp (fn [] ((IO2-2 'done) nil))
　　　　　　　　　　'con (fn [[head & tail]]
　　　　　　　　　　　　　　(((IO2-2 'seq)
　　　　　　　　　　　　　　　((IO2-2 'putChar) head))
　　　　　　　　　　　　　　　((IO2-2 'putStr) matcher (first tail)))) }))

　　'putStrLn (fn [matcher alist]
　　　　　　　　　(((IO2-2 'seq) ((IO2-2 'putStr) matcher alist))
　　　　　　　　　　((IO2-2 'putChar) "\n [ アクションを合成済み：ファイル読み込み＆println ] \n")))

　　'seq (fn [actionA]
　　　　　　(fn [actionB]
　　　　　　　((IO2-2 'unit)
　　　　　　　　((IO2-2 'run)
　　　　　　　　　(((IO2-2 'flatMap) actionA)
　　　　　　　　　　(fn [& args]
　　　　　　　　　　　(((IO2-2 'flatMap) actionB)
　　　　　　　　　　　　(fn [& args] ((IO2-2 'done) nil)))))))))
　})


(defn catenate [matcher path]
　(((IO2-2 'flatMap) ((IO2-2 'readFile) path))
　　(fn [content]
　　　(((IO2-2 'flatMap)
　　　　((IO2-2 'putStrLn) matcher ((my-str 'toList) content)))
　　　　(fn [& args] ((IO2-2 'done) nil))))))

(def MATCH_0
　(fn [name]
　　(fn [[opr & data] pattern] (((name opr) data) pattern))))

----------------------------------------

user=> (use '[clojure.java.io :only (reader)])
nil

user=> ((IO2-2 'run) (catenate MATCH_0 "./aaa.txt"))
１．あいうえお
２．かきくけこ

 [ アクションを合成済み：ファイル読み込み＆println ]
nil


========================================
;; IO アクションを合成する （その２）
========================================

;; MATCH_0 を使わないもの

(def IO2-3
　{ 'unit (fn [any]
　　　　　　　(fn [& args] any))

　　'run (fn [instance] (instance))

　　'readFile (fn [path]
　　　　　　　　　(with-open [rdr (reader path :encoding "UTF-8")]
　　　　　　　　　　(loop [line (.readLine rdr) acc ""]
　　　　　　　　　　　(if (nil? line)
　　　　　　　　　　　　((IO2-3 'unit) acc)
　　　　　　　　　　　　(recur (.readLine rdr) (str acc line "\n"))))))

　　'println (fn [msg]
　　　　　　　　(do
　　　　　　　　　(println msg)
　　　　　　　　　((IO2-3 'unit) nil)))

　　'flatMap (fn [instanceA]
　　　　　　　　　(fn [actionAB]
　　　　　　　　　　(actionAB ((IO2-3 'run) instanceA))))

　　'done (fn [any] ((IO2-3 'unit) nil))

　　'putChar (fn [c]
　　　　　　　　(print c)
　　　　　　　　((IO2-3 'unit) nil))

　　'putStr (fn [[opr & data] class]

　　　　　　　　;; 引数 class を追加したことにより、関数型プログラミングのスタイルに則っている。

　　　　　　　　(((class opr) data)
　　　　　　　　　{ 'emp (fn [] ((IO2-3 'done) nil))
　　　　　　　　　　'con (fn [[head & tail]]
　　　　　　　　　　　　　　(((IO2-3 'seq)
　　　　　　　　　　　　　　　((IO2-3 'putChar) head))
　　　　　　　　　　　　　　　((IO2-3 'putStr) (first tail) class))) }))

　　'putStrLn (fn [class alist]

　　　　　　　　　;; 引数 class を追加したことにより、関数型プログラミングのスタイルに則っている。

　　　　　　　　　(((IO2-3 'seq) ((IO2-3 'putStr)  alist class))
　　　　　　　　　　((IO2-3 'putChar) "\n [ アクションを合成済み：ファイル読み込み＆println ] \n")))

　　'seq (fn [actionA]
　　　　　　(fn [actionB]
　　　　　　　((IO2-3 'unit)
　　　　　　　　((IO2-3 'run)
　　　　　　　　　(((IO2-3 'flatMap) actionA)
　　　　　　　　　　(fn [& args]
　　　　　　　　　　　(((IO2-3 'flatMap) actionB)
　　　　　　　　　　　　(fn [& args] ((IO2-3 'done) nil)))))))))
　})

(defn catenate2 [class path]
　(((IO2-3 'flatMap) ((IO2-3 'readFile) path))
　　(fn [content]
　　　(((IO2-3 'flatMap)
　　　　((IO2-3 'putStrLn) class ((my-str 'toList) content)))
　　　　(fn [& args] ((IO2-3 'done) nil))))))

----------------------------------------

user=> (def lst
　{ 'emp (fn [& args]
　　　　　　(fn [pattern] ((pattern 'emp))))
　　'con (fn [alist]
　　　　　　(fn [pattern] ((pattern 'con) alist))) })
  #_=>   #_=>   #_=>   #_=> #'user/lst


user=> ((IO2-3 'run) (catenate2 lst "./aaa.txt"))
１．あいうえお
２．かきくけこ

 [ アクションを合成済み：ファイル読み込み＆println ]
nil

========================================
