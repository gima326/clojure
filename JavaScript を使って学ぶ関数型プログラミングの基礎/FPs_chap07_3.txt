;; 『JavaScript を使って学ぶ関数型プログラミングの基礎』（長瀬嘉秀 監修／立川察理 著）
;;  コード例のなかから、興味深いものをピックアップして、
;; 「Clojure で実現するとこんな感じかな？」というコードを書いてみました。


========================================
;; 7.5 関数を渡す
========================================

;; コールバック関数で処理をモジュール化する（P231 - 235）

(def succ
　(fn [n] (+ n 1)))

(def opposite
　(fn [n] (- n)))


(def doCall
　(fn [n]
　　(succ n)))

user=> (opposite 100)
-100

user=> (succ 100)
101

user=> (doCall 100)
101

----------------------------------------

(def setupCallback
　(fn [fnc_cb]
　　(fn [n]
　　　(fnc_cb n))))

(def doCallBack (setupCallback succ))


;; doCallBack は succ を引数としてもらうことで、
;; setupCallback と succ はそれぞれの「モジュール」として独立させられる、と。
;; それらを組み変えることも可能になる。

user=> (doCallBack 100)
101

user=> ((setupCallback opposite) 100)
-100

----------------------------------------

;; リストの各要素に関数を適用し、変換する。

(def my-compose
　(fn [f g]
　　(fn [arg]
　　　(f (g arg)))))

(defn toArray [alist]
　(letfn [ (toArrayHelper [[opr & data] acc]
　　((opr
　　　{ 'emp (fn [& args] (vec acc))
　　　　'con (fn [[h & t]] (toArrayHelper (first t) (concat acc (list h)))) })
　　　data)) ]

　　(toArrayHelper alist '())))

(def MAP
　(fn [callback]
　　(fn [[opr & data]]
　　　((opr
　　　　{ 'emp (fn [& _] '(emp))
　　　　　'con (fn [[head & tail]]
　　　　　　　　(list
　　　　　　　　　'con
　　　　　　　　　(callback head)
　　　　　　　　　((MAP callback) (first tail))))
　　　　}) data))))

(def mapDouble
　(MAP
　　(fn [n] (* 2 n))))

(def mapSquare
　(MAP
　　(fn [n] (* n n))))


;; 擬似 Lisp データ

(def numbers '(con 1 (con 2 (con 3 (emp)))))


user=> (mapDouble numbers)
(con 2 (con 4 (con 6 (emp))))

user=> ((my-compose toArray mapDouble) numbers)
[2 4 6]

user=> ((my-compose toArray mapSquare) numbers)
[1 4 9]


========================================

;; 畳み込み関数に関数を渡す（P235 - 244）

(def LIST
　{
　　'sum
　　　(fn [[opr & data]]　　　
　　　　(fn [accumulator]
　　　　　((opr
　　　　　　{
　　　　　　　'emp
　　　　　　　　(fn [& _] accumulator)
　　　　　　　'con
　　　　　　　　(fn [[head & tail]]
　　　　　　　　　(((LIST 'sum) (first tail)) (+ head accumulator)))
　　　　　　}) data)))

　　'sumWithCallback
　　　(fn [[opr & data]]　　　
　　　　(fn [accumulator]
　　　　　(fn [fnc]
　　　　　　((opr
　　　　　　　{
　　　　　　　　'emp
　　　　　　　　　(fn [& _] accumulator)
　　　　　　　　'con
　　　　　　　　　(fn [[head & tail]]
　　　　　　　　　　((fnc head)
　　　　　　　　　　　((((LIST 'sumWithCallback)
　　　　　　　　　　　　(first tail))
　　　　　　　　　　　　accumulator)
　　　　　　　　　　　　fnc)))
　　　　　　　}) data))))
　})

(def numbers '(con 1 (con 2 (con 3 (emp)))))

(def callback
　(fn [n]
　　(fn [m] (+ n m))))


user=> ((((LIST 'sumWithCallback) numbers) 0) callback)
6


----------------------------------------

(def LIST
　{
　　'length
　　　(fn [[opr & data]]　　　
　　　　(fn [accumulator]
　　　　　((opr
　　　　　　{
　　　　　　　'emp
　　　　　　　　(fn [& _] accumulator)
　　　　　　　'con
　　　　　　　　(fn [[head & tail]]
　　　　　　　　　(((LIST 'length) (first tail)) (+ 1 accumulator)))
　　　　　　}) data)))

　　'lengthWithCallback
　　　(fn [[opr & data]]　　　
　　　　(fn [accumulator]
　　　　　(fn [fnc]
　　　　　　((opr
　　　　　　　{
　　　　　　　　'emp
　　　　　　　　　(fn [& _] accumulator)
　　　　　　　　'con
　　　　　　　　　(fn [[head & tail]]
　　　　　　　　　　((fnc head)
　　　　　　　　　　　((((LIST 'lengthWithCallback)
　　　　　　　　　　　　(first tail))
　　　　　　　　　　　　accumulator)
　　　　　　　　　　　　fnc)))
　　　　　　}) data))))
　})

(def numbers '(con 1 (con 2 (con 3 (con 4 (emp))))))

(def callback2
　(fn [n]
　　(fn [m] (+ 1 m))))


user=> (((LIST 'length) numbers) 0)
4

user=> ((((LIST 'lengthWithCallback) numbers) 0) callback2)
4

========================================

;; リストの畳み込み関数

(def FLDR
　(fn [[opr & data]]　　　
　　(fn [accumulator]
　　　(fn [fnc]
　　　　((opr
　　　　　{
　　　　　　'emp
　　　　　　　(fn [& _] accumulator)
　　　　　　'con
　　　　　　　(fn [[head & tail]]
　　　　　　　　((fnc head)
　　　　　　　　　(((FLDR
　　　　　　　　　　(first tail))
　　　　　　　　　　accumulator)
　　　　　　　　　　fnc)))
　　　　　　}) data)))))

(def sum
　(fn [alist]
　　(((FLDR alist) 0)
　　　(fn [item]
　　　　(fn [acc]
　　　　　(+ item acc))))))

(def len
　(fn [alist]
　　(((FLDR alist) 0)
　　　(fn [item]
　　　　(fn [acc]
　　　　　(+ 1 acc))))))


user=> numbers
(con 1 (con 2 (con 3 (con 4 (emp)))))

user=> (sum numbers)
10

user=> (len numbers)
4

----------------------------------------

;; 要素の積を算出する

(def product
　(fn [alist]
　　(((FLDR alist) 1)
　　　(fn [item]
　　　　(fn [acc]
　　　　　(* item acc))))))

user=> (product numbers)
24

----------------------------------------

;; 論理演算

(def all
　(fn [alist]
　　(((FLDR alist) true)
　　　(fn [item]
　　　　(fn [acc]
　　　　　(and item acc))))))

(def any
　(fn [alist]
　　(((FLDR alist) false)
　　　(fn [item]
　　　　(fn [acc]
　　　　　(or item acc))))))

user=> (all '(con true (con true (emp))))
true

user=> (all '(con false (con true (emp))))
false


user=> (any '(con true (con true (emp))))
true

user=> (any '(con false (con true (emp))))
true

user=> (any '(con false (con false (emp))))
false

----------------------------------------

;; リスト操作

(def LIST
　{
　　'append
　　　(fn [xs]
　　　　(fn [ys]　　　
　　　　　(((first xs)
　　　　　　{
　　　　　　　'emp
　　　　　　　　(fn [& _] ys)
　　　　　　　'con
　　　　　　　　(fn [[head & tail]]
　　　　　　　　　(list 'con head (((LIST 'append) (first tail)) ys)))
　　　　　　}) (rest xs))))

　　'reverse
　　　(fn [alist]
　　　　(((FLDR alist) '(emp))
　　　　　;; FLDR_fnc
　　　　　(fn [item]
　　　　　　(fn [acc]
　　　　　　　(((LIST 'append)
　　　　　　　　;; append_xs
　　　　　　　　acc)
　　　　　　　　;; append_ys
　　　　　　　　(list 'con item '(emp)))))))

　　'find
　　　(fn [alist]
　　　　(fn [pred]
　　　　　(((FLDR alist) nil)
　　　　　　;; FLDR_fnc
　　　　　　(fn [item]
　　　　　　　(fn [acc]
　　　　　　　　(if (pred item) item acc))))))

　　'toArray (fn [alist]
　　　(letfn [ (toArrayHelper [[opr & data] acc]
　　　　((opr
　　　　　{ 'emp (fn [& args] (vec acc))
　　　　　　'con (fn [[h & t]] (toArrayHelper (first t) (concat acc (list h)))) })
　　　　　data)) ]
　　　　(toArrayHelper alist '())))

　})

;; 既出

(def FLDR
　(fn [[opr & data]]　　　
　　(fn [accumulator]
　　　(fn [fnc]
　　　　((opr
　　　　　{
　　　　　　'emp
　　　　　　　(fn [& _] accumulator)
　　　　　　'con
　　　　　　　(fn [[head & tail]]
　　　　　　　　((fnc head)
　　　　　　　　　(((FLDR
　　　　　　　　　　(first tail))
　　　　　　　　　　accumulator)
　　　　　　　　　　fnc)))
　　　　　　}) data)))))

----------------------------------------

;; append

user=> (def xs '(con 1 (con 2 (emp))))
#'user/xs

user=> (def ys '(con 3 (con 4 (emp))))
#'user/ys

user=> (((LIST 'append) xs) ys)
(con 1 (con 2 (con 3 (con 4 (emp)))))

user=> (((LIST 'append) ys) xs)
(con 3 (con 4 (con 1 (con 2 (emp)))))

----------------------------------------

;; reverse

user=> ((LIST 'reverse) '(con 1 (con 2 (con 3 (emp)))))
(con 3 (con 2 (con 1 (emp))))

user=> ((LIST 'toArray) ((LIST 'reverse) '(con 1 (con 2 (con 3 (emp))))))
[3 2 1]

----------------------------------------

;; find

user=> (((LIST 'find) '(con 1 (con 2 (con 3 (emp))))) odd?)
1

user=> (((LIST 'find) '(con 1 (con 2 (con 3 (emp))))) #(= % 4))
nil

========================================
