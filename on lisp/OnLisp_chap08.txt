;; 『On Lisp』のコード例のなかから、興味深いものをピックアップして、
;; 「Clojure で実現するとこんな感じかな？」というコードを書いてみました。


(defmacro me [expr]
　`(pprint (macroexpand '~expr)))

(defmacro me1 [expr]
　`(pprint (macroexpand-1 '~expr)))

(defmacro bench [expr & flg]
　`(let [start# (System/nanoTime) result# ~expr]
　　　result#
　　　{ :result (if ~@flg result# ~''----)
　　　　:elapsed (- (System/nanoTime) start#) }))

=====================================
8.1 他の手段では不可能なとき (P109-112)
=====================================

;; 関数でも、マクロでも、どっちでも良いケース

(defn add1-fn [n]
　(+ 1 n))

(defmacro add1 [n]
　`(+ 1 ~n))


;; while は、マクロでないと実現できないケース

(defmacro my-while [test & body]
　`(loop []
　　(when ~test
　　　~@body
　　　(recur))))

user=> (let [a (atom 10)]
　(my-while
　　(pos? @a)
　　(println @a)
　　(swap! a dec)))
  #_=>   #_=>   #_=>   #_=> 10
9
8
7
6
5
4
3
2
1
nil

----------------------------------

　「関数」：
　　・呼び出されるのに際して、何より先に全ての引数を一度だけ評価する

　「マクロ」：
　　・（一度も評価しない、複数回評価する、など）引数の評価を本体部分で制御できる
　　・呼び出し側のコンテキスト内へ直に展開される

----------------------------------

　・引数の評価を制御することで得られる効能

　　効果１．式を変形させる
　　効果２．変数束縛
　　効果３．条件分岐による評価
　　効果４．複数回の引数評価

　・効能にも、有害にもなり得るけれども…

　　効果５．呼び出し側の「環境」を利用する
　　効果６．新しい「環境」を包みこむ
　　効果７．関数呼び出しを節約する


=====================================
8.2 マクロと関数どちらがよい？ (P112-114)
=====================================

　・マクロの長所

　　特徴１．コンパイル時の計算
　　特徴２．Lisp との密な統合
　　特徴３．関数呼び出しの節約

　・マクロの短所

　　特徴４．マクロはデータになり得ない（引数に渡せない、返り値になり得ない、データ構造内に格納できない）
　　特徴５．ソースコードの不明確さ（関数より読みづらい）
　　特徴６．実行時の不明確さ（動作が不明確、デバッグしづらい）
　　特徴７．再帰を扱うのが難しい

----------------------------------

;; マクロだと、count の呼び出しを実行時ではなく、
;; 定義時（コンパイル時）に済ませられる

(defn avg-fn [& args]
　(double
　　(/ (apply + args) (count args))))

(defmacro avg [& args]
　`(double
　　(/ (+ ~@args) ~(count args))))

----------------------------------
;; 「特徴４」にたいする試行錯誤（my-apply ver.1〜3）
----------------------------------

;; 可変長の引数を渡したければ、こんなのどおだろう？
;; eval がちとあれだなぁ…。でも上記「count」と同様に eval はオーバーヘッドにならないはずだから、
;; いいのかなぁ？

(defmacro my-apply [opr lst]
　`(~opr ~@(eval lst)))

user=> (my-apply avg-fn (1 2 3))
Unexpected error (ClassCastException) macroexpanding my-apply at (REPL:1:1).
java.lang.Long cannot be cast to clojure.lang.IFn

user=> (my-apply avg-fn '(1 2 3))
2.0

user=> (my-apply avg '(1 2 3))
2.0


;; この場合、関数を使うこともできる。
;; …ただ、オペレーターがマクロの場合は明示的にクォートを付与しなきゃいけない。

(defn my-apply2 [opr lst]
　(eval `(~opr ~@lst)))

user=> (my-apply2 avg-fn '(10 20 30))
20.0

user=> (my-apply2 'avg (range 10))
4.5

user=> (my-apply2 avg (range 10))
Syntax error compiling at (REPL:1:1).
Can't take value of a macro: #'user/avg


;; 実行時に eval 呼び出しは効率が悪いのなら、やっぱりマクロを使うべきらしいんで、
;; 無名関数で eval を包めばいいのかな、と。

(defmacro my-apply3 [opr lst]
　`(~(fn [o l] (eval `(~o ~@l))) '~opr ~lst))


;; 内部関数 fnc を定義してるバージョン。
;; これで実行時のオーバーヘッドを避けられるのか分からないけれど。

(defmacro my-apply4 [opr lst]
　(letfn [(fnc [o l] (eval `(~o ~@l)))]
　　`(~fnc '~opr ~lst)))

user=> (my-apply4 avg-fn '(10 20 30))
20.0

user=> (my-apply4 avg (range 10))
4.5

----------------------------------

;; 関数に包みつつ、可変長のリスト引数 lst にも対応している。
;; 一応、動きます。

(defmacro my-fnc [opr lst]
　`(fn [] (my-apply ~opr ~lst)))

user=> ((my-fnc avg (list 1 2 3)))
2.0


;; 関数に引数を持たせたい場合は、アナフォリックな変数（~'n）にしないといけない。

(defmacro my-fnc2 [opr lst]
　`(fn [~'n] (* ~'n (my-apply3 ~opr ~lst))))

user=> (def bar (my-fnc2 avg-fn '(1 2 3)))
#'user/bar

user=> (bar 4)
8.0

----------------------------------

;; [ おまけ ]

user=> (bench (my-apply avg-fn (range 100)))
{:result ----, :elapsed 235549}

user=> (bench (my-apply avg (range 100)))
{:result ----, :elapsed 69812}

user=> (bench (my-apply avg-fn (range 1000)))
{:result ----, :elapsed 10491415}


;; ぎゃふん！
;; たったの 1000 でもマクロのほうはコケちゃったよぉ？

user=> (bench (my-apply avg (range 1000)))
Syntax error (StackOverflowError) compiling at (REPL:1:8).
null


=====================================
8.3 マクロの応用例 (P114-120)
=====================================

〜マクロの両端〜

・CLTL1 のオペレータのうち、マクロは 10 %に満たないくらい（多いほど良い、というものではない）
・そのマクロのバリエーションは、「ユーティリティー」から「埋め込み言語」の間に連続的に分布している

　| <-------------------  マクロ  --------------------> |
　【 ユーティリティー（の作成） 】 〜 【 埋め込み言語（の実装） 】


　「ユーティリティー」：
　　・小さい
　　・汎用的、もしくは、特定の用途を持っている
　　・組み込みオペレーターの類似品（自分用にカスタマイズしたもの、など）
　　・処理中に類似するパターンが散見されるときなどに、それらを統合する方法
　　・タイプする文字数を減らすことも、立派な目的だ（読むときにも、読む分量が減る）

　「埋め込み言語」：
　　・大がかり
　　・特別な用途を持っている
　　・「リスト」として表現された式であれば、それが Lisp でなくても、
　　　Lisp 自身が備えている組み込みパーザ（read）、コンパイラー（compiler）を用いて、
　　　その式を「言語」として扱うことができる

　　・プログラムは、その「埋め込み言語」（の文法）で書かれたものと、Lisp の文法とが混在した状態になる
　　・既存の Lisp の機能を利用できる（必要な機能のすべてを自作する必要はない）
　　・「埋め込み言語」実装方法は、２タイプ（インタプリタータイプ、コンパイラータイプ）

　　　「インタプリタータイプ」：
　　　　・素朴な方法である
　　　　・Lisp の組み込みパーザ（read）を利用する
　　　　・「組み込み言語」の文法を解釈・評価するためのインタプリタを作る
　　　　・実行時に、「組み込み言語」インタプリタが「埋め込み言語」部分を解釈・評価する
　　　　・そのつど解釈される（オーバーヘッドになる）
　　　　・遅い

　　　「コンパイラータイプ」：
　　　　・より良い方法である
　　　　・Lisp の組み込みコンパイラー（compiler）を利用する
　　　　・コンパイル時に、コンパイラーが「埋め込み言語」の個々の式を、
　　　　　インタプリタが「埋め込み言語」部分を解釈・評価するのと同じ動作をする Lisp コードに変換する
　　　　・実行時の解釈のオーバーヘッドがない
　　　　・速い

----------------------------------

;; マクロの持つ機能のひとつである「パターンの統合」の例として、2D ドロープログラムの
;; リファクタリングを見せてくれているが、割愛します。

;; 以下のページのように、Clojure でも実現可能なようです。

[ https://github.com/pangloss/onlisp-in-clojure/blob/master/ch8.clj ]

=====================================
